import pickle
import os
from datetime import date

import mysql.connector
import streamlit as st
import mlflow
from mlflow.models import infer_signature
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sblearn.models import SymbolicRegressor


def format_testing_frequency_display(option: str):
    """
    Modifies the display of the labels on the testing frequency dropdown menu.
    """
    match option:
        case 1: 
            return "1 week"
        case 4:
            return "4 weeks"
        case 12: 
            return "12 weeks"
        case 24:
            return "24 weeks"
        
    raise NotImplemented("The testing frequency given to the formatting function is not part of the predefined list.")

def model_exists(model_name: str) -> bool:
    """
    Returns True if the model referenced by model_name already exists on MLFlow.
    """

    # TODO: modifier la fonction pour qu'elle vérifie l'existence du modèle dans la BDD, et pas dans MLFlow
    if mlflow.get_experiment_by_name(f"/{model_name}"):
        return True
    return False


def display_formula(model: SymbolicRegressor, X: pd.DataFrame, y):
    """
    Displays the formula found by the model.
    """
    # Mapping column names to their variable name in the formula generated by the model
    column_values_mapping = {}
    i = 0
    for column in X.columns:
        column_values_mapping[f"x{i}"] = f"\\textsf{{{column}}}"
        i += 1

    i = 0
    for column in y.columns:
        column_values_mapping[f"y{i}"] = f"\\textsf{{{column}}}"
        i += 1

    st.info("Your model has been trained! It has found the formula below:")      
    c = st.container()
    for formula in model.formulas:
        for m in column_values_mapping:
            formula = formula.replace(m, column_values_mapping[m])
        latex_formula = convert_str_to_latex(formula)
        c.latex(latex_formula)
    st.info("In order to ensure the best performance for your model, please upload testing data. More info on the homepage.")

def update_mlflow(model: SymbolicRegressor, model_name: str, X_test, y_test, X_train):
    """
    Updates MLFlow with the newly-trained model.
    """
    mlflow.set_experiment(f"/{model_name}")
    with mlflow.start_run():
        params = model.get_params()
        y_pred = model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        mlflow.log_params(params)
        mlflow.log_metric("mean absolute error", mae)
        signature = infer_signature(X_train, model.predict(X_train))
        model_info = mlflow.sklearn.log_model(
            sk_model=model,
            artifact_path=model_name,
            signature=signature,
            input_example=X_train,
            registered_model_name=model_name,
        )


def find_formula(dataframe: pd.DataFrame, feature_columns: str, target_columns: str, model_name: str, email: str, testing_frequency: int, overwrite: bool):
    """
    Uses the model to find the formula that best fits the data.
    """
    if not overwrite and model_exists(model_name):
        st.error(f"The model {model_name} already exists. Check the box 'Overwrite model' if you want to retrain it.")
        return


    X, y = prepare_data(dataframe, feature_columns, target_columns)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    if type(X) != bool:
        model = train_model(X, y, model_name)
        if not model:
            raise ValueError("An unknown error occured while training the model.")
        display_formula(model, X, y)

        test_every_nth_day = testing_frequency * 7 # Need to convert weeks into days
        update_mlflow(model, model_name, X_test, y_test, X_train)
        update_db(model_name, email, test_every_nth_day)


def update_db(model_name: str, email: str, test_every_nth_day: int):
    """
    Updates the database that contains the list of models with their associated email and testing frequence information.
    """

    # MYSQL username and password need to be set as environment variables
    # PENSER À AJOUTER UNE GESTION DES ERREURS !!!
    with mysql.connector.connect(
        host="localhost",
        user=os.environ["MYSQL_USER"],
        password=os.environ["MYSQL_PWD"],
        database="mathfinder"
    ) as db:
        with db.cursor() as c:
            today = date.today()
            query = f"""INSERT INTO Models (name, email, test_every_nth_day, last_testing_date) VALUES("{model_name}", "{email}", {test_every_nth_day}, "{today.strftime('%Y-%m-%d')}")\
                ON DUPLICATE KEY UPDATE email="{email}",  test_every_nth_day={test_every_nth_day}, last_testing_date="{today.strftime('%Y-%m-%d')}" """
            c.execute(query)
            db.commit()
    

def prepare_data(dataframe: pd.DataFrame, feature_columns: str, target_columns: str):
    """
    Retrieves the data in the columns required by the user.
    """
    f_headers = feature_columns.split(";")
    for i in range(len(f_headers)):
        f_headers[i] = f_headers[i].strip()

    t_headers = target_columns.split(";")
    for i in range(len(t_headers)):
        t_headers[i] = t_headers[i].strip()
    
    try:
        X = dataframe[f_headers]
        y = dataframe[t_headers]
    except KeyError:
        msg_error = "An error occured while retrieving the data from the columns you specified. Make sure you entered the column names properly."
        st.error(msg_error)
        return False, False

    return X, y 

def convert_str_to_latex(formula: str) -> str:
    """
    Converts the formula string into its latex equivalent so it can be displayed.
    """
    characters_to_remove = ("$_")
    latex_formula = formula.replace("*", " \\times ")
    latex_formula = latex_formula.replace("/", " \\div ")
    for c in characters_to_remove:
        latex_formula = latex_formula.replace(c, " ")
    
    return latex_formula
  

def train_model(X, y, model_name):
    """
    Trains the model with the data provided by the user.
    """

    left_co, cent_co, last_co = st.columns(3)
    with cent_co:
        with st.spinner("The model is looking for the math formula that best describes your data. This might take a few minutes, do not close this page"):  
            try:
                model.fit(X, y)
                st.balloons()

            except ValueError:
                # Is there more than one target?
                if len(y.shape) != 1:
                    msg_error = "Mathfinder can only work with one target value at a time. Please spcecify only one target column."
                else:
                    msg_error = "An unknown error occured while processing your data."
                st.error(msg_error)
                return False
            
            except TypeError:
                # Issues with nan values
                msg_error = "Your dataset contains some data that cannot be processed. Please ensure it contains only numerical values and make sure no value is missing."
                st.error(msg_error)
                return False
        
        return model


# Setting up the model and MLFlow
model = SymbolicRegressor()

mlflow.set_tracking_uri(uri="http://127.0.0.1:8080")
st.set_page_config(layout="wide")


# Setting up the web page
left_co, cent_co, last_co = st.columns(3)
with cent_co:
    st.title("Mathfinder - Discover the math behind your data!")

uploaded_file = st.file_uploader(
    label="Upload the CSV file that contains your data here"
)


if uploaded_file:

    df = pd.read_csv(uploaded_file)
    df = df.loc[:, ~df.columns.str.contains("^Unnamed")]  # Dropping unnamed columns
    with st.expander("Data preview"):
        st.subheader("Your data (preview might be truncated):")
        st.table(df.head(20))
    feature_column_names = st.text_input(
        label="Enter the names of the features columns, separated by semi-columns (;)"
    )
    target_column_names = st.text_input(
        label="Enter the name of the target column"
    )
    model_name = st.text_input(
        label="Enter the name you want to give to your model"
    )
    email = st.text_input(
        label="Enter your email address"
    )
    testing_frequency = st.selectbox(
        "How often do you want your model to be tested? You will need to feed enough testing data to your model for every test",
        (1, 4, 12, 24),
        format_func=format_testing_frequency_display
    )
    overwrite = st.checkbox('Overwrite model')
    kwargs = {
        "dataframe": df,
        "feature_columns": feature_column_names,
        "target_columns": target_column_names,
        "model_name": model_name,
        "email": email,
        "testing_frequency": testing_frequency,
        "overwrite": overwrite
    }
    st.button(label="Train the model", on_click=find_formula, kwargs=kwargs)

